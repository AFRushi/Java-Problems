/*
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.i.e ([0 1 2 4 5 6 7] might become
[4 5 6 7 0 1 2]).
You are given a target value to search.if found in the array return its index, otherwise return -1, No duplicate valiue exist
assume that

solution :

Rotation used is right rotation with fixed rotation value,Time complexity is O(n) and space complexity O(n).
Search the target value in array fuctio has time complexity of O(logn).

*/


import java.util.*;
import java.io.*;
public class Main {
    public static void main(String[] args) throws Exception {
        // Your code here!
       // Reding the element from the console
       BufferedReader br = new BufferedReader(new InputStreamReader(System.in));  
        String [] str = br.readLine().trim().split(" ");
        int target = Integer.parseInt(br.readLine());
        
        int [] sortArray = new int[str.length];
        
        for(int i = 0; i< str.length; i++){
            sortArray[i] = Integer.parseInt(str[i]);
        }
        
      
        
        //rotate at pivot unknown to  the user
        int [] rotatedArray = rotateSortedArray(sortArray, 3);
        
         System.out.println(Arrays.toString(rotatedArray));
         
         System.out.println( searchTargetInArray(rotatedArray , target) );

    }
    
    // Search the target value int the Array.
    public static int searchTargetInArray( int [] array, int target ){
        
        int left =0;
        int right = array.length -1;
        
        while(left <= right){
            
            int mid =  left + (right-left) / 2;
            
            if(array[mid] == target)
                return mid;
            if(array[mid] >= array[left]){
                
                if(array[left] <= target && target < array[mid]){
                    right = mid -1;
                }else{
                    left = mid + 1;
                }
            }else{
                if(array[mid] <= target && target <= array[right]){
                    left = mid + 1;
                }else{
                    right = mid - 1;
                }
            }
        }
        return -1;
        
    }
    
  // Performed rotation on the array. Right rotation is performed 
    public static int [] rotateSortedArray( int [] a, int k){
        
        if(k > a.length){
            k = k% a.length;
        }
        
        int [] result = new int[a.length];
     
        for(int i =0 ;i < k;i++){
            result[i] = a[a.length - k +i];
        }
    
        // System.out.println(Arrays.toString(result));

        int j=0;
        for(int i =k; i< a.length ; i++){
            result[i] = a[j];
            j++;
        }
        
        return result;
    } 
}
